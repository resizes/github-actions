name: "NuGet Security Report"
description: "Restore .NET projects and report vulnerable NuGet packages"
inputs:
  dotnet-version:
    description: "The .NET version to use"
    default: "8.0.x"

  project-path:
    description: 'Path to scan for .csproj files'
    required: false
    default: './'


runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore projects and capture warnings
      shell: bash
      run: |
        echo "## ðŸ›¡ NuGet Warnings & Vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "<details><summary>Full Report ($vulns findings)</summary>" >> $GITHUB_STEP_SUMMARY
        issues=0

        # Find all .csproj files
        projects=$(find "${{ inputs.project-path }}" -name '*.csproj')

        for proj in $projects; do
          echo "Restoring $proj..."
          restore_output=$(dotnet restore "$proj" --ignore-failed-sources 2>&1 || true)

          # Capture all NU warnings (NUxxxx)
          nu_warnings=$(echo "$restore_output" | grep -E "NU[0-9]{4}" || true)
          if [ -n "$nu_warnings" ]; then
            count=$(echo "$nu_warnings" | wc -l)
            issues=$((issues + count))
            echo "### Warnings in $proj" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$nu_warnings" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Check for vulnerable packages
          vuln_output=$(dotnet list "$proj" package --vulnerable 2>&1 || true)
          vuln_lines=$(echo "$vuln_output" | grep -E 'Vulnerable packages|Top-level Package' || true)
          if [ -n "$vuln_lines" ]; then
            vuln_count=$(echo "$vuln_lines" | wc -l)
            issues=$((issues + vuln_count))
            echo "### Vulnerable packages in $proj" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$vuln_output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        done

        if [ "$issues" -eq 0 ]; then
          echo "âœ… No NuGet warnings or vulnerable packages detected." >> $GITHUB_STEP_SUMMARY
        else
          echo "**$issues issues found across projects**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "</details>" >> $GITHUB_STEP_SUMMARY
