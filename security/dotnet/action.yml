name: SecurityReport

on:
  workflow_dispatch:

jobs:
  dotnet-security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Find all .csproj files
        id: find-projects
        run: |
          projects=$(find . -name '*.csproj')
          echo "projects=$projects" >> $GITHUB_OUTPUT

      - name: Restore projects (capture NU warnings/errors)
        run: |
          echo "## ðŸ›¡ NU Warnings & Errors" >> $GITHUB_STEP_SUMMARY
          issues=0

          for proj in ${{ steps.find-projects.outputs.projects }}; do
            echo "Restoring $proj..."
            restore_output=$(dotnet restore "$proj" --ignore-failed-sources 2>&1 || true)
            
            # Capture all NU warnings/errors
            nus=$(echo "$restore_output" | grep -E '^.*NU[0-9]{4}:' || true)
            if [ -n "$nus" ]; then
              issues=$((issues + $(echo "$nus" | wc -l)))
              echo "### $proj" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$nus" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Check for vulnerable NuGet packages
        run: |
          echo "## ðŸ›¡ Vulnerable NuGet Packages" >> $GITHUB_STEP_SUMMARY
          issues=0

          for proj in ${{ steps.find-projects.outputs.projects }}; do
            echo "Scanning $proj..."
            vuln_output=$(dotnet list "$proj" package --vulnerable 2>&1 || true)
            vuln_lines=$(echo "$vuln_output" | grep -E 'Top-level Package|Vulnerable packages' || true)
            if [ -n "$vuln_lines" ]; then
              issues=$((issues + $(echo "$vuln_lines" | wc -l)))
              echo "### $proj" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$vuln_output" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Run .NET analyzers
        run: |
          echo "## ðŸ›¡ Analyzer Warnings" >> $GITHUB_STEP_SUMMARY
          for proj in ${{ steps.find-projects.outputs.projects }}; do
            echo "Analyzing $proj..."
            analyzer_output=$(dotnet build "$proj" /p:EnableNETAnalyzers=true /p:AnalysisMode=AllEnabledByDefault 2>&1 || true)
            # Filter warnings/errors for security related rules (optional: refine patterns)
            sec_warnings=$(echo "$analyzer_output" | grep -E 'CA|SCS|SEC' || true)
            if [ -n "$sec_warnings" ]; then
              echo "### $proj" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$sec_warnings" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Summary
        run: |
          echo "âœ… Security scan completed. Check the summary above."
